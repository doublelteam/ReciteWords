<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.db.dao.OperateRecordMapper" >
  <resultMap id="BaseResultMap" type="com.db.model.OperateRecord" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="teacher_id" property="teacherId" jdbcType="VARCHAR" />
    <result column="student_id" property="studentId" jdbcType="VARCHAR" />
    <result column="before_point" property="beforePoint" jdbcType="BIGINT" />
    <result column="after_point" property="afterPoint" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, update_time, ip, teacher_id, student_id, before_point, after_point
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from operate_record
    where id = #{id,jdbcType=BIGINT}
  </select>

  <select id="selectAllRecord" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from operate_record
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from operate_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.db.model.OperateRecord" >
    insert into operate_record (id, update_time, ip, 
      teacher_id, student_id, before_point, 
      after_point)
    values (#{id,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, #{ip,jdbcType=VARCHAR}, 
      #{teacherId,jdbcType=VARCHAR}, #{studentId,jdbcType=VARCHAR}, #{beforePoint,jdbcType=BIGINT},
      #{afterPoint,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.db.model.OperateRecord" >
    insert into operate_record
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="ip != null" >
        ip,
      </if>
      <if test="teacherId != null" >
        teacher_id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="beforePoint != null" >
        before_point,
      </if>
      <if test="afterPoint != null" >
        after_point,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null" >
        #{teacherId,jdbcType=VARCHAR},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="beforePoint != null" >
        #{beforePoint,jdbcType=BIGINT},
      </if>
      <if test="afterPoint != null" >
        #{afterPoint,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.db.model.OperateRecord" >
    update operate_record
    <set >
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ip != null" >
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null" >
        teacher_id = #{teacherId,jdbcType=VARCHAR},
      </if>
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="beforePoint != null" >
        before_point = #{beforePoint,jdbcType=BIGINT},
      </if>
      <if test="afterPoint != null" >
        after_point = #{afterPoint,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.db.model.OperateRecord" >
    update operate_record
    set update_time = #{updateTime,jdbcType=TIMESTAMP},
      ip = #{ip,jdbcType=VARCHAR},
      teacher_id = #{teacherId,jdbcType=VARCHAR},
      student_id = #{studentId,jdbcType=VARCHAR},
      before_point = #{beforePoint,jdbcType=BIGINT},
      after_point = #{afterPoint,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>